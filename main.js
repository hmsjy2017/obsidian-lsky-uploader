/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD

*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LskyUploader
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var LskyUploader = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addCommand({
        id: "upload-image",
        name: "\u4E0A\u4F20\u56FE\u7247\u5230Lsky\u56FE\u5E8A",
        callback: () => this.uploadImage()
      });
      this.addSettingTab(new LskySettingTab(this.app, this));
      this.registerEvent(
        this.app.workspace.on("editor-paste", this.handlePaste.bind(this))
      );
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, {
        token: ""
      }, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  // 处理粘贴事件
  handlePaste(evt, editor) {
    return __async(this, null, function* () {
      var _a;
      const files = (_a = evt.clipboardData) == null ? void 0 : _a.files;
      if (!files || files.length === 0) return;
      for (const file of Array.from(files)) {
        if (!file.type.startsWith("image/")) continue;
        evt.preventDefault();
        try {
          new import_obsidian.Notice("\u5F00\u59CB\u4E0A\u4F20\u56FE\u7247...");
          const markdownLink = yield this.uploadImage(file);
          editor.replaceSelection(markdownLink);
          new import_obsidian.Notice("\u56FE\u7247\u4E0A\u4F20\u6210\u529F\uFF01");
        } catch (error) {
          new import_obsidian.Notice(`\u4E0A\u4F20\u5931\u8D25: ${error.message}`);
        }
      }
    });
  }
  // 上传图片
  uploadImage(file) {
    return __async(this, null, function* () {
      if (!file) {
        return "";
      }
      const formData = new FormData();
      formData.append("file", file);
      const headers = {
        "Accept": "application/json"
      };
      if (this.settings.token) {
        headers["Authorization"] = `Bearer ${this.settings.token}`;
      }
      try {
        const response = yield fetch("https://picgo.top/api/v1/upload", {
          method: "POST",
          headers,
          body: formData
        });
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const result = yield response.json();
        if (!result.status) {
          throw new Error(result.message);
        }
        return result.data.links.markdown;
      } catch (error) {
        console.error("Upload error:", error);
        throw error;
      }
    });
  }
};
var LskySettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("API Token").setDesc("\u8BBE\u7F6ELsky Pro\u7684API Token (\u53EF\u9009)").addText((text) => text.setPlaceholder("\u8F93\u5165\u4F60\u7684API Token").setValue(this.plugin.settings.token).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.token = value;
      yield this.plugin.saveSettings();
    })));
  }
};
